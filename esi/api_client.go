/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.10.dev12
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package esi

import (
	"net/http"
	"strings"
	"time"

	"golang.org/x/oauth2"

	"github.com/antihax/evedata/esi/v1"
	"github.com/antihax/evedata/esi/v2"
	"github.com/antihax/evedata/esi/v3"
	"github.com/antihax/evedata/esi/v4"
)

type contextOAuth2Key *oauth2.Token

var ContextOAuth2 contextOAuth2Key

// APIClient manages communication with the EVE Swagger Interface API
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	V1 *esiv1.APIClient
	V2 *esiv2.APIClient
	V3 *esiv3.APIClient
	V4 *esiv4.APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(httpClient *http.Client, userAgent string) *APIClient {
	if httpClient == nil {
		httpClient = http.DefaultClient
	}

	c := &APIClient{}

	c.V1 = esiv1.NewAPIClient(httpClient, userAgent)
	c.V2 = esiv2.NewAPIClient(httpClient, userAgent)
	c.V3 = esiv3.NewAPIClient(httpClient, userAgent)
	c.V4 = esiv4.NewAPIClient(httpClient, userAgent)

	return c
}

func (c *APIClient) ChangeBasePath(path string) {
	c.V1.ChangeBasePath(path)
	c.V2.ChangeBasePath(path)
	c.V3.ChangeBasePath(path)
	c.V4.ChangeBasePath(path)
}

// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}
